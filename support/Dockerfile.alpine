# syntax = docker/dockerfile:1

# This Dockerfile is designed for production, not development. Use with Kamal or build'n'run by hand:
# docker build -t my-app .
# docker run -d -p 80:80 -p 443:443 --name my-app -e RAILS_MASTER_KEY=<value from config/master.key> my-app

FROM ruby:3.3.6-alpine AS base

# Rails app lives here
WORKDIR /rails

# Install base packages
RUN apk add curl file libpq-dev libexif-dev imagemagick

# Set production environment
ENV RAILS_ENV="production" \
  BUNDLE_DEPLOYMENT="1" \
  BUNDLE_PATH="/usr/local/bundle" \
  BUNDLE_WITHOUT="development"


# Create a temporary build stage to reduce size of final image
FROM base AS build

# Install packages needed to build gems
RUN apk add git curl bash build-base libffi-dev

# Install application gems
COPY Gemfile Gemfile.lock ./
RUN bundle lock --add-platform x86_64-linux-musl
RUN bundle install && \
  rm -rf ~/.bundle/ "${BUNDLE_PATH}"/ruby/*/cache "${BUNDLE_PATH}"/ruby/*/bundler/gems/*/.git && \
  bundle exec bootsnap precompile --gemfile

ARG NVM_VERSION=0.39.5
ARG NODE_VERSION=20.10.0
ARG YARN_VERSION=1.22.21

# nodejs via nvm
RUN apk add nodejs npm

# yarn via npm
RUN npm install --global yarn@${YARN_VERSION}

COPY package.json yarn.lock ./
RUN yarn install

# Copy application code
COPY . .

RUN apk add tzdata

# Precompile bootsnap code for faster boot times
RUN bundle lock --add-platform x86_64-linux-musl
RUN bundle exec bootsnap precompile app/ lib/

# Set environment variable to skip some initializers
ENV DOCKER_BUILD=true

# Precompiling assets for production without requiring secret RAILS_MASTER_KEY
RUN SECRET_KEY_BASE_DUMMY=1 ./bin/rails assets:precompile

# Clean up node_modules
RUN rm -rf node_modules


# Final stage for app image
FROM base

# Copy built artifacts: gems, application
COPY --from=build "${BUNDLE_PATH}" "${BUNDLE_PATH}"
COPY --from=build /rails /rails

# Run and own only the runtime files as a non-root user for security
RUN addgroup -g 1000 rails && \
  adduser -D -h /rails -u 1000 -G rails rails && \
  chown -R rails:rails db log storage tmp
USER rails

# Entrypoint prepares the database.
ENTRYPOINT ["/rails/bin/docker-entrypoint"]

# Start the server by default, this can be overwritten at runtime
EXPOSE 3000
CMD ["./bin/rails", "server"]

# 472.28 MB
